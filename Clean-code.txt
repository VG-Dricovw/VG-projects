list of things to keep in mind:
1: meaningful varibles: $currentDate = now()
2: dont use extra suffixes for get req : getUser() NOT getUserData()
3: make code writeable by not using raw numbers ect but varibles for the numbers: $result(JSON_PARSE) NOT $result(42) 
4: dont use too many if () statements: in_array[$days] NOT if($day == 'friday') if($day == 'saturday')
5: dont abbriviate naming in case of long functions: $locations NOT $loc = $locations //2 pages of code   $loc->verify()
6: dont repeat names: class Car{ $model, $make, $year} NOT class Car{ $carmodel, $carmake, $caryear}
7: use === instead of ==
8: use ?? to check for null: $session_get ?? $session_name ?? 'guest'
9: use type hinting to prevent short circuting: function get(int $age = 0) NOT function get($age = 0)
10: function argument should be 3 max: function construct(1, 2, 3) NOT function construct(1, 2, 3, 4, 5, 6)
11: do not use handle, but write what the function does
12: one level of abstaction, so split up functions
13: passing a bool in a function for an if statement should be another function: createFile() CreateTempFile NOTcreateFile($file, $temp = false)
14: if you modify value, make a new value name: $name becomes $first_name NOT $name becomes $name
15: dont have common functions like config() for you own code: class config {} NOT function config()
16: be careful of using singleton pattern not independant code: class DBconnection { construct} NOT class DBconnection { construct() getInstance()}
17: encapsualte conditionals: if ($article->isPublished()) NOT if ($article->state === 'published')
18: avoid negative naming: isPublished !isPublished NOT isNotPublished
19: avoid if statement, use seperate classes: class building getValue class appartment getValue NOT if(if(if()))
20: dont check type in if statement: function travel(Car $car) NOT functin travel($vehicle) {if car if bike}
21: remove dead code
22: use public/protected/private and getters to keep data hidden: private price function getPrice NOT public price = 100;
23: use composition over inhertence: class userData class user {$this->userData} NOT class userdata extends user
24: avoid fluent interfaces: function setMake($this->make = $make) NOT function setMake($this->make = $make; return $this->make) 
25: use final in class creations: interface Vehicle final class Car NOT final class Car 
26: implement SOLID
27: dont repeat yourself: showList($vehicle)  NOT showCarList {} showBikeList